generator client {
  provider        = "prisma-client-js"
  output          = "./.client"

}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}


model CampaignBD {

  id Int @id @default(autoincrement())
  //si es null no se pueden a√±adir
  accessToken String?
  createdAt DateTime @default(now())
  deletedAt DateTime?
  topics TopicBD[]
  users UserBD[]
  @@map("campaigns")
}


model UserBD {
  nickname String  @id
  name String
  pictureFileId String?
  //si es null es que lo administra el admin
  passwordHash String?
  isAdmin Boolean @default(false)
  createdAt DateTime @default(now())
  //si es marcado como eliminado ya no puede participar
  deletedAt DateTime?
  topics TopicBD[]
  replies ReplyBD[]
  replieViews ReplyBDView[]
  campaignId Int 
  campaign CampaignBD @relation(fields:[campaignId],references:[id],onDelete:Cascade)
  messagesSended MessageBD[] @relation(name:"messagesSended")
  messagesRecived MessageBD[] @relation(name:"messagesRecived")
  @@map("users")
}


model TopicBD {
  id Int @id @default(autoincrement())
  canAdd Boolean @default(true)
  createdAt DateTime @default(now())
  deletedAt DateTime?
  userId String 
  user UserBD @relation(fields:[userId],references:[nickname],onDelete:Cascade)
  campaignId Int 
  campaign CampaignBD @relation(fields:[campaignId],references:[id],onDelete:Cascade)
  name String
  replies ReplyBD[]

  @@map("topics")
  
}

model ReplyBD {
  id        Int       @id @default(autoincrement())
  topicId   Int
  topic     TopicBD     @relation(fields: [topicId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  userId    String
  user      UserBD      @relation(fields: [userId], references: [nickname], onDelete: Cascade)

  title     String?
  message   String

  parentId  Int?
  parent    ReplyBD?    @relation(name: "childrenReplyBD", fields: [parentId], references: [id], onDelete: SetNull)
  children  ReplyBD[]   @relation(name: "childrenReplyBD")

  views     ReplyBDView[]

  @@map("replies")
}

model ReplyBDView {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  replyUpdatedAt DateTime
  userId String 
  user UserBD @relation(fields:[userId],references:[nickname],onDelete:Cascade)
  replyId Int 
  reply ReplyBD @relation(fields:[replyId],references:[id],onDelete:Cascade)

  @@unique([userId,replyId,replyUpdatedAt])
  @@map("replyViews")
}

model MessageBD {
  id Int @id @default(autoincrement())
  userFromId String 
  userFrom UserBD @relation(name:"messagesSended",fields:[userFromId],references:[nickname],onDelete:Cascade)
  userToId String 
  userTo UserBD @relation(name:"messagesRecived",fields:[userToId],references:[nickname],onDelete:Cascade)
  message String
  viewedAt DateTime?
  createdAt DateTime @default(now())
  deletedAt DateTime?
  @@map("messages")
}